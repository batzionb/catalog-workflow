package org.kie.kogito.openapi.backstagecatalog.api;

import org.kie.kogito.openapi.backstagecatalog.model.Entity;
import org.kie.kogito.openapi.backstagecatalog.model.Location;
import org.kie.kogito.openapi.backstagecatalog.model.LocationSpec;
import org.kie.kogito.openapi.backstagecatalog.model.LocationsGet200Response;
import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;
import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;
import org.eclipse.microprofile.rest.client.annotation.RegisterClientHeaders;
import org.kie.kogito.openapi.backstagecatalog.api.auth.CompositeAuthenticationProvider;
import org.kie.kogito.openapi.backstagecatalog.api.auth.AuthenticationPropagationHeadersFactory;

import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;
import jakarta.ws.rs.*;
import jakarta.ws.rs.core.MediaType;

import jakarta.enterprise.context.ApplicationScoped;

import io.quarkiverse.openapi.generator.annotations.GeneratedClass;
import io.quarkiverse.openapi.generator.annotations.GeneratedMethod;
import io.quarkiverse.openapi.generator.annotations.GeneratedParam;

/**
  * Backstage Catalog API
  * <p>No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)</p>
  */
@Path("")
@RegisterRestClient( configKey="backstagecatalog_yaml")
@GeneratedClass(value="backstagecatalog.yaml", tag = "Default")
@RegisterProvider(CompositeAuthenticationProvider.class)
@RegisterClientHeaders(AuthenticationPropagationHeadersFactory.class)
@ApplicationScoped
public interface DefaultApi {

     /**
     * Get a single catalog entity
     *
     * @param entityRef Entity reference in form `kind:namespace/name`
     */
    @GET
    @Path("/entities/{entityRef}")
    @Produces({"application/json"})
    @GeneratedMethod ("")
    public Entity entitiesEntityRefGet(
        @GeneratedParam("entityRef") @PathParam("entityRef") String entityRef

    );

     /**
     * List catalog locations
     *
     */
    @GET
    @Path("/locations")
    @Produces({"application/json"})
    @GeneratedMethod ("")
    public LocationsGet200Response locationsGet(
        
    );

     /**
     * Create a new location
     *
     * @param locationSpec 
     */
    @POST
    @Path("/locations")
    @Consumes({"application/json"})
    @Produces({"application/json"})
    @GeneratedMethod ("")
    public Location locationsPost(
        LocationSpec locationSpec

    );

     /**
     * Query catalog entities
     *
     * @param filter One or more filter sets, e.g. filter=kind=Component,spec.type=service. Multiple filters are ORed together, within each filter the criteria are ANDed. 
     * @param fields Comma-separated list of fields to include
     * @param limit 
     * @param offset 
     * @param orderField 
     * @param fullTextFilter 
     */
    @GET
    @Path("/api/catalog/entities")
    @Produces({"application/json"})
    @GeneratedMethod ("Query catalog entities")
    public List<Entity> queryCatalogEntities(
        @GeneratedParam("filter") @QueryParam("filter") List<String> filter
, @GeneratedParam("fields") @QueryParam("fields") String fields
, @GeneratedParam("limit") @QueryParam("limit") Integer limit
, @GeneratedParam("offset") @QueryParam("offset") Integer offset
, @GeneratedParam("orderField") @QueryParam("orderField") String orderField
, @GeneratedParam("fullTextFilter") @QueryParam("fullTextFilter") String fullTextFilter

    );

}
