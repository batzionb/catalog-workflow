openapi: 3.0.0
info:
  title: Backstage Catalog API
  version: "1.0.0"
servers:
  - url: /
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Entity:
      type: object
      required: [apiVersion, kind, metadata]
      properties:
        apiVersion:
          type: string
        kind:
          type: string
        metadata:
          type: object
        spec:
          type: object
        relations:
          type: array
          items:
            type: object

    Location:
      type: object
      required: [type, target]
      properties:
        id:
          type: string
        type:
          type: string
        target:
          type: string
        presence:
          type: string

    LocationSpec:
      type: object
      required: [type, target]
      properties:
        type:
          type: string
        target:
          type: string

security:
  - bearerAuth: []

paths:
  /api/catalog/entities:
    get:
      operationId: Query catalog entities
      summary: Query catalog entities
      security:
        - bearerAuth: []
      parameters:
        - name: filter
          in: query
          style: form
          explode: false
          description: >
            One or more filter sets, e.g. filter=kind=Component,spec.type=service.
            Multiple filters are ORed together, within each filter the criteria are ANDed.
          schema:
            type: array
            items:
              type: string
        - name: fields
          in: query
          description: Comma-separated list of fields to include
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: offset
          in: query
          schema:
            type: integer
        - name: orderField
          in: query
          schema:
            type: string
        - name: fullTextFilter
          in: query
          schema:
            type: string
      responses:
        '200':
          description: A list of catalog entities
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Entity'

  /entities/{entityRef}:
    get:
      summary: Get a single catalog entity
      security:
        - bearerAuth: []
      parameters:
        - name: entityRef
          in: path
          required: true
          schema:
            type: string
          description: Entity reference in form `kind:namespace/name`
      responses:
        '200':
          description: The requested entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entity'
        '404':
          description: Not found

  /locations:
    get:
      summary: List catalog locations
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of catalog locations
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Location'

    post:
      summary: Create a new location
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocationSpec'
      responses:
        '200':
          description: The created location
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
